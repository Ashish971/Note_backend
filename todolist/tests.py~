from rest_framework.test import APITestCase
from rest_framework import status
from django.contrib.auth.models import User
from rest_framework.authtoken.models import Token
from .models import Todo

import os
#
# if os.getenv('DJANGO_TEST_ENV'):
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.sqlite3',
#             'NAME': BASE_DIR / 'db.sqlite3',
#         }
#     }

class TodoViewManualTest(APITestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='test123')
        self.token = Token.objects.create(user=self.user)
        self.url = '/todos/'  # Using the direct RESTful endpoint

    def test_create_todo_successfully(self):
        self.client.credentials(HTTP_AUTHORIZATION='Token ' + self.token.key)

        data = {
            "title": "My Todo",
            "content": "This is a test todo."
        }

        response = self.client.post(self.url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertIn("todo_id", response.data)
        self.assertEqual(Todo.objects.count(), 1)
        self.assertEqual(Todo.objects.first().title, "My Todo")
        print("✅ todo.tests.py > Todo Create : loaded")

    def test_create_todo_missing_fields(self):
        self.client.credentials(HTTP_AUTHORIZATION='Token ' + self.token.key)

        response = self.client.post(self.url, {}, format='json')

        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn("error", response.data)
        print("✅ todo.tests.py > Todo Create : missing fields")

    def test_unauthorized_todo_creation(self):
        response = self.client.post(self.url, {"title": "x", "content": "y"})
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)
        print("✅ todo.tests.py > Todo Create : unauthorized")

class TodoUpdateTest(APITestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='test123')
        self.token = Token.objects.create(user=self.user)
        self.client.credentials(HTTP_AUTHORIZATION='Token ' + self.token.key)

        # Create a todo to update
        self.todo = Todo.objects.create(
            user=self.user,
            title="Old Title",
            content="Old Content"
        )

        self.url = '/todos/'  # your PUT endpoint

    def test_update_todo_successfully(self):
        data = {
            "todo_id": self.todo.id,
            "title": "Updated Title",
            "content": "Updated Content"
        }

        response = self.client.put(self.url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['message'], "Todo updated successfully")

        # Refresh the todo from DB
        self.todo.refresh_from_db()
        self.assertEqual(self.todo.title, "Updated Title")
        self.assertEqual(self.todo.content, "Updated Content")
        print("✅ todo.tests.py > Update Todo : updated")

    def test_update_todo_partial_fields(self):
        data = {
            "todo_id": self.todo.id,
            "title": "New Title Only"
        }

        response = self.client.put(self.url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.todo.refresh_from_db()
        self.assertEqual(self.todo.title, "New Title Only")
        self.assertEqual(self.todo.content, "Old Content")  # Unchanged
        print("✅ todo.tests.py > Update Todo : partial")

    def test_update_todo_unauthorized(self):
        self.client.credentials()  # remove auth

        data = {
            "todo_id": self.todo.id,
            "title": "Hacky Update"
        }

        response = self.client.put(self.url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)
        print("✅ todo.tests.py > Update Todo : unauthorized")

class TodoDeleteTest(APITestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='test123')
        self.token = Token.objects.create(user=self.user)
        self.client.credentials(HTTP_AUTHORIZATION='Token ' + self.token.key)

        # Create a todo to delete
        self.todo = Todo.objects.create(
            user=self.user,
            title="Todo to Delete",
            content="This todo will be deleted."
        )

        self.url = '/todos/'  # Your delete endpoint

    def test_delete_todo_successfully(self):
        data = {
            "todo_id": self.todo.id
        }

        response = self.client.delete(self.url, data, format='json')

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual